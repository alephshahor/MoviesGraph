NEO4J_HTTP_PORT=7474
NEO4J_BOLT_PORT=7687
NEO4J_USER=neo4j
NEO4J_PASS=1234

ZOOKEEPER_PORT=2181

BROKER_PORT=9092
BROKER_PORT_EXPOSED=9093

SCHEMA_REGISTRY_PORT=8081

ADD_STREAM_DATA_QRY= 'with event
    call apoc.do.case([
        event.type = "TV Show" and event.title is not null and event.releaseYear is not null,
        "merge (s:Tv{Title: event.title, ReleaseYear: event.releaseYear})
          on create
            set s.Duration = event.duration,
                s.Description = event.description
          on match
            set s.Duration = coalesce(s.Duration, event.duration),
                s.Description = coalesce(s.Description, event.description)
          return s as show",
        event.type = "Movie" and event.title is not null and event.releaseYear is not null,
        "merge (s:Movie{Title: event.title, ReleaseYear: event.releaseYear})
            on create
              set s.Duration = event.duration,
                  s.Description = event.description
            on match
              set s.Duration = coalesce(s.Duration, event.duration),
                  s.Description = coalesce(s.Description, event.description)
          return s as show"], "", {event:event}) YIELD value
    with event, value.show as show
    foreach(directorName in split(event.director, ",") |
      merge(d:Director{Name: directorName})
      merge(d)-[:DIRECTED]->(show))
    foreach(actorName in split(event.cast, ",") |
      merge(a:Actor{Name: actorName})
      merge(a)-[:ACTED_IN]->(show))
    foreach(countryName in split(event.country, ",") |
      merge(c:Country{Name: countryName})
      merge(c)<-[:MADE_IN]-(show))
    foreach(genre in split(event.genres, ",") |
      merge(g:Genre{Name: genre})
      merge (g)<-[:BELONGS_TO]-(show))
    foreach (x IN CASE WHEN event.rating IS NOT NULL THEN [1] ELSE [] END |
      merge(r:Rated{Name: event.rating})
      merge(r)<-[:RATED]-(show));'