version: '3'
services:
  neo4j:
    image: neo4j:4.2.6
    hostname: neo4j
    container_name: neo4j
    depends_on:
      - zookeeper
      - broker
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./neo4j/plugins:/plugins
    environment:
      NEO4J_AUTH: neo4j/1234
      NEO4J_kafka_bootstrap_servers: broker:9093
      NEO4J_kafka_group_id: "neo4j_sink"
      NEO4J_kafka_group_instance_id: "neo4j_sink"
      NEO4J_kafka_key_deserializer: "io.confluent.kafka.serializers.KafkaAvroDeserializer"
      NEO4J_kafka_value_deserializer: "io.confluent.kafka.serializers.KafkaAvroDeserializer"
      NEO4J_kafka_max_poll_records: 16384
      NEO4J_dbms_logs_debug_level: DEBUG
      NEO4J_streams_source_enabled: "false"
      NEO4J_streams_sink_enabled: "true"
      NEO4J_streams_sink_topic_cypher_netflix-movies: >
        with event
        call apoc.do.case([
            event.type = "TV Show" and event.title is not null,
            "merge (s:Tv{Title: event.title, ReleaseYear: event.releaseYear})
              on create
                set s.Duration = event.duration,
                    s.Description = event.description
              on match
                set s.Duration = case when s.Duration is null
                      then event.duration
                      else s.Duration
                      end,
                    s.Description = case when s.Description is null
                      then event.description
                      else s.Description
                      end
              return s as show",
            event.type = "Movie" and event.title is not null,
            "merge (s:Movie{Title: event.title, ReleaseYear: event.releaseYear})
                on create
                  set s.Duration = event.duration,
                      s.Description = event.description
                on match
                  set s.Duration = case when s.Duration is null
                        then event.duration
                        else s.Duration
                        end,
                      s.Description = case when s.Description is null
                        then event.description
                        else s.Description
                        end
              return s as show"], "", {event:event}) YIELD value
        with event, value.show as show
        foreach(directorName in split(event.director, ",") |
          merge(d:Director{Name: directorName})
          merge(d)-[:DIRECTED]->(show))
        foreach(actorName in split(event.cast, ",") |
          merge(a:Actor{Name: actorName})
          merge(a)-[:ACTED_IN]->(show))
        foreach(countryName in split(event.country, ",") |
          merge(c:Country{Name: countryName})
          merge(c)<-[:MADE_IN]-(show))
        foreach(genre in split(event.listed_in, ",") |
          merge(g:Genre{Name: genre})
          merge (g)<-[:BELONGS_TO]-(show))
        foreach (x IN CASE WHEN event.rating IS NOT NULL THEN [1] ELSE [0] END |
          merge(r:Rated{Name: event.rating})
          merge(r)<-[:RATED]-(show));

      NEO4J_streams_sink_topic_cypher_tmdb-movies: >
        with event
          call apoc.do.case([
              event.type = "TV Show" and event.title is not null,
              "merge (s:Tv{Title: event.title, ReleaseYear: event.releaseYear})
                on create
                  set s.Duration = event.duration,
                      s.Description = event.description
                on match
                  set s.Duration = case when s.Duration is null
                        then event.duration
                        else s.Duration
                        end,
                      s.Description = case when s.Description is null
                        then event.description
                        else s.Description
                        end
                return s as show",
              event.type = "Movie" and event.title is not null,
              "merge (s:Movie{Title: event.title, ReleaseYear: event.releaseYear})
                  on create
                    set s.Duration = event.duration,
                        s.Description = event.description
                  on match
                    set s.Duration = case when s.Duration is null
                          then event.duration
                          else s.Duration
                          end,
                        s.Description = case when s.Description is null
                          then event.description
                          else s.Description
                          end
                return s as show"], "", {event:event}) YIELD value
          with event, value.show as show
          foreach(directorName in split(event.director, ",") |
            merge(d:Director{Name: directorName})
            merge(d)-[:DIRECTED]->(show))
          foreach(actorName in split(event.cast, ",") |
            merge(a:Actor{Name: actorName})
            merge(a)-[:ACTED_IN]->(show))
          foreach(countryName in split(event.country, ",") |
            merge(c:Country{Name: countryName})
            merge(c)<-[:MADE_IN]-(show))
          foreach(genre in split(event.listed_in, ",") |
            merge(g:Genre{Name: genre})
            merge (g)<-[:BELONGS_TO]-(show))
          foreach (x IN CASE WHEN event.rating IS NOT NULL THEN [1] ELSE [] END |
            merge(r:Rated{Name: event.rating})
            merge(r)<-[:RATED]-(show));

      NEO4J_kafka_schema_registry_url: 'http://schema_registry:8081'
      NEO4J_dbms_memory_heap_initial__size: '5g'
      NEO4J_dbms_memory_heap_max__size: '5g'
      NEO4J_dbms_memory_pagecache_size: '7g'
      NEO4J_apoc_initializer_neo4j_1: >
       create constraint MovieTitleKey if not exists
        on (n:Movie)
        assert (n.Title) is node key
      NEO4J_apoc_initializer_neo4j_2: >
        create constraint TvTitleKey if not exists
         on (n:Tv)
         assert (n.Title) is node key
      NEO4J_apoc_initializer_neo4j_3: >
        create constraint DirectorNameKey if not exists
          on (n:Director)
          assert (n.Name) is node key
      NEO4J_apoc_initializer_neo4j_4: >
        create constraint ActorNameKey if not exists
          on (n:Actor)
          assert (n.Name) is node key
      NEO4J_apoc_initializer_neo4j_5: >
        create constraint CountryNameKey if not exists
          on (n:Country)
          assert (n.Name) is node key
      NEO4J_apoc_initializer_neo4j_6: >
        create constraint RatedNameKey if not exists
          on (n:Rated)
          assert (n.Name) is node key
      NEO4J_apoc_initializer_neo4j_7: >
        create index MovieTitleIndex
          for (n:Movie)
          on (n.Title)
      NEO4J_apoc_initializer_neo4j_8: >
        create index DirectorNameIndex
          for (n:Director)
          on (n.Name)
      # NEO4J_metrics_jmx_enabled: 'true' -- Only available in enterprise edition

  zookeeper:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-enterprise-kafka
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_SCHEMA_REGISTRY_URL: "http://schema_registry:8081"
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema_registry:
    image: confluentinc/cp-schema-registry
    hostname: schema_registry
    container_name: schema_registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'