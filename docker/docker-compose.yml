version: '3'
services:
  neo4j:
    image: neo4j:4.2.6
    hostname: neo4j
    container_name: neo4j
    depends_on:
      - zookeeper
      - broker
    ports:
      - "${NEO4J_HTTP_PORT}:${NEO4J_HTTP_PORT}"
      - "${NEO4J_BOLT_PORT}:${NEO4J_BOLT_PORT}"
    volumes:
      - ./neo4j/plugins:/plugins
    environment:
      NEO4J_AUTH: "${NEO4J_USER}/${NEO4J_PASS}"
      NEO4J_kafka_bootstrap_servers: "broker:${BROKER_PORT_EXPOSED}"
      NEO4J_kafka_group_id: "neo4j_sink"
      NEO4J_kafka_group_instance_id: "neo4j_sink"
      NEO4J_kafka_key_deserializer: "io.confluent.kafka.serializers.KafkaAvroDeserializer"
      NEO4J_kafka_value_deserializer: "io.confluent.kafka.serializers.KafkaAvroDeserializer"
      NEO4J_kafka_max_poll_records: 500
      NEO4J_dbms_logs_debug_level: DEBUG
      NEO4J_streams_source_enabled: "false"
      NEO4J_streams_sink_enabled: "true"
      NEO4J_streams_sink_topic_cypher_netflix-movies: ${ADD_STREAM_DATA_QRY}
      NEO4J_streams_sink_topic_cypher_tmdb-movies: ${ADD_STREAM_DATA_QRY}
      NEO4J_kafka_schema_registry_url: "http://schema_registry:${SCHEMA_REGISTRY_PORT}"
      NEO4J_dbms_memory_heap_initial__size: '5g'
      NEO4J_dbms_memory_heap_max__size: '5g'
      NEO4J_dbms_memory_pagecache_size: '7g'
      NEO4J_apoc_initializer_neo4j_1: >
       create constraint MovieTitleAndRelYearKey if not exists
        on (n:Movie)
        assert (n.Title, n.ReleaseYear) is node key
      NEO4J_apoc_initializer_neo4j_2: >
        create constraint TvTitleAndRelYearKey if not exists
         on (n:Tv)
         assert (n.Title, n.ReleaseYear) is node key
      NEO4J_apoc_initializer_neo4j_3: >
        create constraint DirectorNameKey if not exists
          on (n:Director)
          assert (n.Name) is node key
      NEO4J_apoc_initializer_neo4j_4: >
        create constraint ActorNameKey if not exists
          on (n:Actor)
          assert (n.Name) is node key
      NEO4J_apoc_initializer_neo4j_5: >
        create constraint CountryNameKey if not exists
          on (n:Country)
          assert (n.Name) is node key
      NEO4J_apoc_initializer_neo4j_6: >
        create constraint RatedNameKey if not exists
          on (n:Rated)
          assert (n.Name) is node key
      NEO4J_apoc_initializer_neo4j_7: >
        create index MovieTitleIndex
          for (n:Movie)
          on (n.Title)
      NEO4J_apoc_initializer_neo4j_8: >
        create index DirectorNameIndex
          for (n:Director)
          on (n.Name)
      NEO4J_metrics_jmx_enabled: 'true'

  zookeeper:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: "${ZOOKEEPER_PORT}"
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-enterprise-kafka
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "${BROKER_PORT}:${BROKER_PORT}"
    expose:
      - "${BROKER_PORT_EXPOSED}"
    environment:
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://broker:${BROKER_PORT_EXPOSED},OUTSIDE://localhost:${BROKER_PORT}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:${BROKER_PORT_EXPOSED},OUTSIDE://0.0.0.0:${BROKER_PORT}"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "broker:${BROKER_PORT_EXPOSED}"
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_SCHEMA_REGISTRY_URL: "http://schema_registry:${SCHEMA_REGISTRY_PORT}"
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema_registry:
    image: confluentinc/cp-schema-registry
    hostname: schema_registry
    container_name: schema_registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - "${SCHEMA_REGISTRY_PORT}:${SCHEMA_REGISTRY_PORT}"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:${ZOOKEEPER_PORT}'